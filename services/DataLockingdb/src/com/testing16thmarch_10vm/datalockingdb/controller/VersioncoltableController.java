/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.datalockingdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing16thmarch_10vm.datalockingdb.Versioncoltable;
import com.testing16thmarch_10vm.datalockingdb.service.VersioncoltableService;


/**
 * Controller object for domain model class Versioncoltable.
 * @see Versioncoltable
 */
@RestController("DataLockingdb.VersioncoltableController")
@Api(value = "VersioncoltableController", description = "Exposes APIs to work with Versioncoltable resource.")
@RequestMapping("/DataLockingdb/Versioncoltable")
public class VersioncoltableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VersioncoltableController.class);

    @Autowired
	@Qualifier("DataLockingdb.VersioncoltableService")
	private VersioncoltableService versioncoltableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Versioncoltable instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Versioncoltable createVersioncoltable(@RequestPart("wm_data_json") Versioncoltable versioncoltable, @RequestPart(value = "blobcol", required = false) MultipartFile _blobcol) {
		LOGGER.debug("Create Versioncoltable with information: {}" , versioncoltable);

    versioncoltable.setBlobcol(WMMultipartUtils.toByteArray(_blobcol));
		versioncoltable = versioncoltableService.create(versioncoltable);
		LOGGER.debug("Created Versioncoltable with information: {}" , versioncoltable);

	    return versioncoltable;
	}

    @ApiOperation(value = "Returns the Versioncoltable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Versioncoltable getVersioncoltable(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Versioncoltable with id: {}" , id);

        Versioncoltable foundVersioncoltable = versioncoltableService.getById(id);
        LOGGER.debug("Versioncoltable details with id: {}" , foundVersioncoltable);

        return foundVersioncoltable;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Versioncoltable instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getVersioncoltableBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Versioncoltable instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Versioncoltable.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Versioncoltable versioncoltable = versioncoltableService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(versioncoltable, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Versioncoltable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Versioncoltable editVersioncoltable(@PathVariable("id") Integer id, @RequestBody Versioncoltable versioncoltable) {
        LOGGER.debug("Editing Versioncoltable with id: {}" , versioncoltable.getPkid());

        versioncoltable.setPkid(id);
        versioncoltable = versioncoltableService.update(versioncoltable);
        LOGGER.debug("Versioncoltable details with id: {}" , versioncoltable);

        return versioncoltable;
    }

    @ApiOperation(value = "Updates the Versioncoltable instance associated with the given id.This API should be used when Versioncoltable instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Versioncoltable editVersioncoltable(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        Versioncoltable newVersioncoltable = WMMultipartUtils.toObject(multipartHttpServletRequest, Versioncoltable.class, "DataLockingdb");
        newVersioncoltable.setPkid(id);

        Versioncoltable oldVersioncoltable = versioncoltableService.getById(id);
        WMMultipartUtils.updateLobsContent(oldVersioncoltable, newVersioncoltable);
        LOGGER.debug("Updating Versioncoltable with information: {}" , newVersioncoltable);

        return versioncoltableService.update(newVersioncoltable);
    }

    @ApiOperation(value = "Deletes the Versioncoltable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVersioncoltable(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Versioncoltable with id: {}" , id);

        Versioncoltable deletedVersioncoltable = versioncoltableService.delete(id);

        return deletedVersioncoltable != null;
    }

    /**
     * @deprecated Use {@link #findVersioncoltables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Versioncoltable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Versioncoltable> searchVersioncoltablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Versioncoltables list by query filter:{}", (Object) queryFilters);
        return versioncoltableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Versioncoltable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Versioncoltable> findVersioncoltables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Versioncoltables list by filter:", query);
        return versioncoltableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Versioncoltable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Versioncoltable> filterVersioncoltables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Versioncoltables list by filter", query);
        return versioncoltableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportVersioncoltables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return versioncoltableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportVersioncoltablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Versioncoltable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> versioncoltableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Versioncoltable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countVersioncoltables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Versioncoltables");
		return versioncoltableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getVersioncoltableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return versioncoltableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VersioncoltableService instance
	 */
	protected void setVersioncoltableService(VersioncoltableService service) {
		this.versioncoltableService = service;
	}

}