/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.datalockingdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.datalockingdb.IntVersioning;


/**
 * ServiceImpl object for domain model class IntVersioning.
 *
 * @see IntVersioning
 */
@Service("DataLockingdb.IntVersioningService")
@Validated
public class IntVersioningServiceImpl implements IntVersioningService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IntVersioningServiceImpl.class);


    @Autowired
    @Qualifier("DataLockingdb.IntVersioningDao")
    private WMGenericDao<IntVersioning, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IntVersioning, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DataLockingdbTransactionManager")
    @Override
    public IntVersioning create(IntVersioning intVersioning) {
        LOGGER.debug("Creating a new IntVersioning with information: {}", intVersioning);

        IntVersioning intVersioningCreated = this.wmGenericDao.create(intVersioning);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(intVersioningCreated);
    }

    @Transactional(readOnly = true, value = "DataLockingdbTransactionManager")
    @Override
    public IntVersioning getById(Integer intversioningId) {
        LOGGER.debug("Finding IntVersioning by id: {}", intversioningId);
        return this.wmGenericDao.findById(intversioningId);
    }

    @Transactional(readOnly = true, value = "DataLockingdbTransactionManager")
    @Override
    public IntVersioning findById(Integer intversioningId) {
        LOGGER.debug("Finding IntVersioning by id: {}", intversioningId);
        try {
            return this.wmGenericDao.findById(intversioningId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No IntVersioning found with id: {}", intversioningId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "DataLockingdbTransactionManager")
    @Override
    public List<IntVersioning> findByMultipleIds(List<Integer> intversioningIds, boolean orderedReturn) {
        LOGGER.debug("Finding IntVersionings by ids: {}", intversioningIds);

        return this.wmGenericDao.findByMultipleIds(intversioningIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DataLockingdbTransactionManager")
    @Override
    public IntVersioning update(IntVersioning intVersioning) {
        LOGGER.debug("Updating IntVersioning with information: {}", intVersioning);

        this.wmGenericDao.update(intVersioning);
        this.wmGenericDao.refresh(intVersioning);

        return intVersioning;
    }

    @Transactional(value = "DataLockingdbTransactionManager")
    @Override
    public IntVersioning delete(Integer intversioningId) {
        LOGGER.debug("Deleting IntVersioning with id: {}", intversioningId);
        IntVersioning deleted = this.wmGenericDao.findById(intversioningId);
        if (deleted == null) {
            LOGGER.debug("No IntVersioning found with id: {}", intversioningId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), IntVersioning.class.getSimpleName(), intversioningId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "DataLockingdbTransactionManager")
    @Override
    public void delete(IntVersioning intVersioning) {
        LOGGER.debug("Deleting IntVersioning with {}", intVersioning);
        this.wmGenericDao.delete(intVersioning);
    }

    @Transactional(readOnly = true, value = "DataLockingdbTransactionManager")
    @Override
    public Page<IntVersioning> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IntVersionings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DataLockingdbTransactionManager")
    @Override
    public Page<IntVersioning> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IntVersionings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DataLockingdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DataLockingdb for table IntVersioning to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "DataLockingdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service DataLockingdb for table IntVersioning to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "DataLockingdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DataLockingdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}