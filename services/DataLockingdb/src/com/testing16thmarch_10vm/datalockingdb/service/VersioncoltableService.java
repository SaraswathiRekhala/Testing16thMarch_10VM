/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.datalockingdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.datalockingdb.Versioncoltable;

/**
 * Service object for domain model class {@link Versioncoltable}.
 */
public interface VersioncoltableService {

    /**
     * Creates a new Versioncoltable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Versioncoltable if any.
     *
     * @param versioncoltable Details of the Versioncoltable to be created; value cannot be null.
     * @return The newly created Versioncoltable.
     */
    Versioncoltable create(@Valid Versioncoltable versioncoltable);


	/**
     * Returns Versioncoltable by given id if exists.
     *
     * @param versioncoltableId The id of the Versioncoltable to get; value cannot be null.
     * @return Versioncoltable associated with the given versioncoltableId.
	 * @throws EntityNotFoundException If no Versioncoltable is found.
     */
    Versioncoltable getById(Integer versioncoltableId);

    /**
     * Find and return the Versioncoltable by given id if exists, returns null otherwise.
     *
     * @param versioncoltableId The id of the Versioncoltable to get; value cannot be null.
     * @return Versioncoltable associated with the given versioncoltableId.
     */
    Versioncoltable findById(Integer versioncoltableId);

	/**
     * Find and return the list of Versioncoltables by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param versioncoltableIds The id's of the Versioncoltable to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Versioncoltables associated with the given versioncoltableIds.
     */
    List<Versioncoltable> findByMultipleIds(List<Integer> versioncoltableIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Versioncoltable. It replaces all fields of the existing Versioncoltable with the given versioncoltable.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Versioncoltable if any.
     *
     * @param versioncoltable The details of the Versioncoltable to be updated; value cannot be null.
     * @return The updated Versioncoltable.
     * @throws EntityNotFoundException if no Versioncoltable is found with given input.
     */
    Versioncoltable update(@Valid Versioncoltable versioncoltable);

    /**
     * Deletes an existing Versioncoltable with the given id.
     *
     * @param versioncoltableId The id of the Versioncoltable to be deleted; value cannot be null.
     * @return The deleted Versioncoltable.
     * @throws EntityNotFoundException if no Versioncoltable found with the given id.
     */
    Versioncoltable delete(Integer versioncoltableId);

    /**
     * Deletes an existing Versioncoltable with the given object.
     *
     * @param versioncoltable The instance of the Versioncoltable to be deleted; value cannot be null.
     */
    void delete(Versioncoltable versioncoltable);

    /**
     * Find all Versioncoltables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Versioncoltables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Versioncoltable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Versioncoltables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Versioncoltables.
     *
     * @see Pageable
     * @see Page
     */
    Page<Versioncoltable> findAll(String query, Pageable pageable);

    /**
     * Exports all Versioncoltables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Versioncoltables matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Versioncoltables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Versioncoltable.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}