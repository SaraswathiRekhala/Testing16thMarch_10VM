/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing16thmarch_10vm.wmstudio.EmployeeHugeRecords;
import com.testing16thmarch_10vm.wmstudio.service.EmployeeHugeRecordsService;


/**
 * Controller object for domain model class EmployeeHugeRecords.
 * @see EmployeeHugeRecords
 */
@RestController("WMSTUDIO.EmployeeHugeRecordsController")
@Api(value = "EmployeeHugeRecordsController", description = "Exposes APIs to work with EmployeeHugeRecords resource.")
@RequestMapping("/WMSTUDIO/EmployeeHugeRecords")
public class EmployeeHugeRecordsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeHugeRecordsController.class);

    @Autowired
	@Qualifier("WMSTUDIO.EmployeeHugeRecordsService")
	private EmployeeHugeRecordsService employeeHugeRecordsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new EmployeeHugeRecords instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeHugeRecords createEmployeeHugeRecords(@RequestPart("wm_data_json") EmployeeHugeRecords employeeHugeRecords, @RequestPart(value = "picurl", required = false) MultipartFile _picurl) {
		LOGGER.debug("Create EmployeeHugeRecords with information: {}" , employeeHugeRecords);

    employeeHugeRecords.setPicurl(WMMultipartUtils.toByteArray(_picurl));
		employeeHugeRecords = employeeHugeRecordsService.create(employeeHugeRecords);
		LOGGER.debug("Created EmployeeHugeRecords with information: {}" , employeeHugeRecords);

	    return employeeHugeRecords;
	}

    @ApiOperation(value = "Returns the EmployeeHugeRecords instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeHugeRecords getEmployeeHugeRecords(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting EmployeeHugeRecords with id: {}" , id);

        EmployeeHugeRecords foundEmployeeHugeRecords = employeeHugeRecordsService.getById(id);
        LOGGER.debug("EmployeeHugeRecords details with id: {}" , foundEmployeeHugeRecords);

        return foundEmployeeHugeRecords;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in EmployeeHugeRecords instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getEmployeeHugeRecordsBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in EmployeeHugeRecords instance" , fieldName);

        if(!WMRuntimeUtils.isLob(EmployeeHugeRecords.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        EmployeeHugeRecords employeeHugeRecords = employeeHugeRecordsService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(employeeHugeRecords, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the EmployeeHugeRecords instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeHugeRecords editEmployeeHugeRecords(@PathVariable("id") Integer id, @RequestBody EmployeeHugeRecords employeeHugeRecords) {
        LOGGER.debug("Editing EmployeeHugeRecords with id: {}" , employeeHugeRecords.getEmpid());

        employeeHugeRecords.setEmpid(id);
        employeeHugeRecords = employeeHugeRecordsService.update(employeeHugeRecords);
        LOGGER.debug("EmployeeHugeRecords details with id: {}" , employeeHugeRecords);

        return employeeHugeRecords;
    }

    @ApiOperation(value = "Updates the EmployeeHugeRecords instance associated with the given id.This API should be used when EmployeeHugeRecords instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeHugeRecords editEmployeeHugeRecords(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        EmployeeHugeRecords newEmployeeHugeRecords = WMMultipartUtils.toObject(multipartHttpServletRequest, EmployeeHugeRecords.class, "WMSTUDIO");
        newEmployeeHugeRecords.setEmpid(id);

        EmployeeHugeRecords oldEmployeeHugeRecords = employeeHugeRecordsService.getById(id);
        WMMultipartUtils.updateLobsContent(oldEmployeeHugeRecords, newEmployeeHugeRecords);
        LOGGER.debug("Updating EmployeeHugeRecords with information: {}" , newEmployeeHugeRecords);

        return employeeHugeRecordsService.update(newEmployeeHugeRecords);
    }

    @ApiOperation(value = "Deletes the EmployeeHugeRecords instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmployeeHugeRecords(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting EmployeeHugeRecords with id: {}" , id);

        EmployeeHugeRecords deletedEmployeeHugeRecords = employeeHugeRecordsService.delete(id);

        return deletedEmployeeHugeRecords != null;
    }

    /**
     * @deprecated Use {@link #findEmployeeHugeRecords(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EmployeeHugeRecords instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<EmployeeHugeRecords> searchEmployeeHugeRecordsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmployeeHugeRecords list by query filter:{}", (Object) queryFilters);
        return employeeHugeRecordsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmployeeHugeRecords instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeHugeRecords> findEmployeeHugeRecords(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeHugeRecords list by filter:", query);
        return employeeHugeRecordsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmployeeHugeRecords instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<EmployeeHugeRecords> filterEmployeeHugeRecords(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeHugeRecords list by filter", query);
        return employeeHugeRecordsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportEmployeeHugeRecords(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeeHugeRecordsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportEmployeeHugeRecordsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = EmployeeHugeRecords.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> employeeHugeRecordsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of EmployeeHugeRecords instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countEmployeeHugeRecords( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmployeeHugeRecords");
		return employeeHugeRecordsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getEmployeeHugeRecordsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return employeeHugeRecordsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeHugeRecordsService instance
	 */
	protected void setEmployeeHugeRecordsService(EmployeeHugeRecordsService service) {
		this.employeeHugeRecordsService = service;
	}

}