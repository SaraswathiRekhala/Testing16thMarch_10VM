/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing16thmarch_10vm.wmstudio.TimestampVersioning;
import com.testing16thmarch_10vm.wmstudio.service.TimestampVersioningService;


/**
 * Controller object for domain model class TimestampVersioning.
 * @see TimestampVersioning
 */
@RestController("WMSTUDIO.TimestampVersioningController")
@Api(value = "TimestampVersioningController", description = "Exposes APIs to work with TimestampVersioning resource.")
@RequestMapping("/WMSTUDIO/TimestampVersioning")
public class TimestampVersioningController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimestampVersioningController.class);

    @Autowired
	@Qualifier("WMSTUDIO.TimestampVersioningService")
	private TimestampVersioningService timestampVersioningService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TimestampVersioning instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TimestampVersioning createTimestampVersioning(@RequestBody TimestampVersioning timestampVersioning) {
		LOGGER.debug("Create TimestampVersioning with information: {}" , timestampVersioning);

		timestampVersioning = timestampVersioningService.create(timestampVersioning);
		LOGGER.debug("Created TimestampVersioning with information: {}" , timestampVersioning);

	    return timestampVersioning;
	}

    @ApiOperation(value = "Returns the TimestampVersioning instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TimestampVersioning getTimestampVersioning(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TimestampVersioning with id: {}" , id);

        TimestampVersioning foundTimestampVersioning = timestampVersioningService.getById(id);
        LOGGER.debug("TimestampVersioning details with id: {}" , foundTimestampVersioning);

        return foundTimestampVersioning;
    }

    @ApiOperation(value = "Updates the TimestampVersioning instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TimestampVersioning editTimestampVersioning(@PathVariable("id") Integer id, @RequestBody TimestampVersioning timestampVersioning) {
        LOGGER.debug("Editing TimestampVersioning with id: {}" , timestampVersioning.getId());

        timestampVersioning.setId(id);
        timestampVersioning = timestampVersioningService.update(timestampVersioning);
        LOGGER.debug("TimestampVersioning details with id: {}" , timestampVersioning);

        return timestampVersioning;
    }

    @ApiOperation(value = "Deletes the TimestampVersioning instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTimestampVersioning(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TimestampVersioning with id: {}" , id);

        TimestampVersioning deletedTimestampVersioning = timestampVersioningService.delete(id);

        return deletedTimestampVersioning != null;
    }

    /**
     * @deprecated Use {@link #findTimestampVersionings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TimestampVersioning instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<TimestampVersioning> searchTimestampVersioningsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TimestampVersionings list by query filter:{}", (Object) queryFilters);
        return timestampVersioningService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TimestampVersioning instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TimestampVersioning> findTimestampVersionings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TimestampVersionings list by filter:", query);
        return timestampVersioningService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TimestampVersioning instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<TimestampVersioning> filterTimestampVersionings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TimestampVersionings list by filter", query);
        return timestampVersioningService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportTimestampVersionings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return timestampVersioningService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportTimestampVersioningsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TimestampVersioning.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> timestampVersioningService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TimestampVersioning instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countTimestampVersionings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TimestampVersionings");
		return timestampVersioningService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getTimestampVersioningAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return timestampVersioningService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TimestampVersioningService instance
	 */
	protected void setTimestampVersioningService(TimestampVersioningService service) {
		this.timestampVersioningService = service;
	}

}