/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.wmstudio.EmployeeHugeRecords;


/**
 * ServiceImpl object for domain model class EmployeeHugeRecords.
 *
 * @see EmployeeHugeRecords
 */
@Service("WMSTUDIO.EmployeeHugeRecordsService")
@Validated
public class EmployeeHugeRecordsServiceImpl implements EmployeeHugeRecordsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeHugeRecordsServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.EmployeeHugeRecordsDao")
    private WMGenericDao<EmployeeHugeRecords, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeHugeRecords, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public EmployeeHugeRecords create(EmployeeHugeRecords employeeHugeRecords) {
        LOGGER.debug("Creating a new EmployeeHugeRecords with information: {}", employeeHugeRecords);

        EmployeeHugeRecords employeeHugeRecordsCreated = this.wmGenericDao.create(employeeHugeRecords);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(employeeHugeRecordsCreated);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public EmployeeHugeRecords getById(Integer employeehugerecordsId) {
        LOGGER.debug("Finding EmployeeHugeRecords by id: {}", employeehugerecordsId);
        return this.wmGenericDao.findById(employeehugerecordsId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public EmployeeHugeRecords findById(Integer employeehugerecordsId) {
        LOGGER.debug("Finding EmployeeHugeRecords by id: {}", employeehugerecordsId);
        try {
            return this.wmGenericDao.findById(employeehugerecordsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No EmployeeHugeRecords found with id: {}", employeehugerecordsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public List<EmployeeHugeRecords> findByMultipleIds(List<Integer> employeehugerecordsIds, boolean orderedReturn) {
        LOGGER.debug("Finding EmployeeHugeRecords by ids: {}", employeehugerecordsIds);

        return this.wmGenericDao.findByMultipleIds(employeehugerecordsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public EmployeeHugeRecords update(EmployeeHugeRecords employeeHugeRecords) {
        LOGGER.debug("Updating EmployeeHugeRecords with information: {}", employeeHugeRecords);

        this.wmGenericDao.update(employeeHugeRecords);
        this.wmGenericDao.refresh(employeeHugeRecords);

        return employeeHugeRecords;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public EmployeeHugeRecords delete(Integer employeehugerecordsId) {
        LOGGER.debug("Deleting EmployeeHugeRecords with id: {}", employeehugerecordsId);
        EmployeeHugeRecords deleted = this.wmGenericDao.findById(employeehugerecordsId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeHugeRecords found with id: {}", employeehugerecordsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), EmployeeHugeRecords.class.getSimpleName(), employeehugerecordsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public void delete(EmployeeHugeRecords employeeHugeRecords) {
        LOGGER.debug("Deleting EmployeeHugeRecords with {}", employeeHugeRecords);
        this.wmGenericDao.delete(employeeHugeRecords);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<EmployeeHugeRecords> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeHugeRecords");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<EmployeeHugeRecords> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeHugeRecords");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table EmployeeHugeRecords to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table EmployeeHugeRecords to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}