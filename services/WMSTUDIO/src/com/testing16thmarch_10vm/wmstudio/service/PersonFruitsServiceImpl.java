/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.wmstudio.PersonFruits;
import com.testing16thmarch_10vm.wmstudio.PersonFruitsId;


/**
 * ServiceImpl object for domain model class PersonFruits.
 *
 * @see PersonFruits
 */
@Service("WMSTUDIO.PersonFruitsService")
@Validated
public class PersonFruitsServiceImpl implements PersonFruitsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonFruitsServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.PersonFruitsDao")
    private WMGenericDao<PersonFruits, PersonFruitsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PersonFruits, PersonFruitsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public PersonFruits create(PersonFruits personFruits) {
        LOGGER.debug("Creating a new PersonFruits with information: {}", personFruits);

        PersonFruits personFruitsCreated = this.wmGenericDao.create(personFruits);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(personFruitsCreated);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public PersonFruits getById(PersonFruitsId personfruitsId) {
        LOGGER.debug("Finding PersonFruits by id: {}", personfruitsId);
        return this.wmGenericDao.findById(personfruitsId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public PersonFruits findById(PersonFruitsId personfruitsId) {
        LOGGER.debug("Finding PersonFruits by id: {}", personfruitsId);
        try {
            return this.wmGenericDao.findById(personfruitsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PersonFruits found with id: {}", personfruitsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public List<PersonFruits> findByMultipleIds(List<PersonFruitsId> personfruitsIds, boolean orderedReturn) {
        LOGGER.debug("Finding PersonFruits by ids: {}", personfruitsIds);

        return this.wmGenericDao.findByMultipleIds(personfruitsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public PersonFruits update(PersonFruits personFruits) {
        LOGGER.debug("Updating PersonFruits with information: {}", personFruits);

        this.wmGenericDao.update(personFruits);
        this.wmGenericDao.refresh(personFruits);

        return personFruits;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public PersonFruits delete(PersonFruitsId personfruitsId) {
        LOGGER.debug("Deleting PersonFruits with id: {}", personfruitsId);
        PersonFruits deleted = this.wmGenericDao.findById(personfruitsId);
        if (deleted == null) {
            LOGGER.debug("No PersonFruits found with id: {}", personfruitsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), PersonFruits.class.getSimpleName(), personfruitsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public void delete(PersonFruits personFruits) {
        LOGGER.debug("Deleting PersonFruits with {}", personFruits);
        this.wmGenericDao.delete(personFruits);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<PersonFruits> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PersonFruits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<PersonFruits> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PersonFruits");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table PersonFruits to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table PersonFruits to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}