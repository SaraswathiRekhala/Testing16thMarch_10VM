/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.allscenariosdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing16thmarch_10vm.allscenariosdb.IntLocking;
import com.testing16thmarch_10vm.allscenariosdb.service.IntLockingService;


/**
 * Controller object for domain model class IntLocking.
 * @see IntLocking
 */
@RestController("allscenariosdb.IntLockingController")
@Api(value = "IntLockingController", description = "Exposes APIs to work with IntLocking resource.")
@RequestMapping("/allscenariosdb/IntLocking")
public class IntLockingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(IntLockingController.class);

    @Autowired
	@Qualifier("allscenariosdb.IntLockingService")
	private IntLockingService intLockingService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new IntLocking instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public IntLocking createIntLocking(@RequestBody IntLocking intLocking) {
		LOGGER.debug("Create IntLocking with information: {}" , intLocking);

		intLocking = intLockingService.create(intLocking);
		LOGGER.debug("Created IntLocking with information: {}" , intLocking);

	    return intLocking;
	}

    @ApiOperation(value = "Returns the IntLocking instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public IntLocking getIntLocking(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting IntLocking with id: {}" , id);

        IntLocking foundIntLocking = intLockingService.getById(id);
        LOGGER.debug("IntLocking details with id: {}" , foundIntLocking);

        return foundIntLocking;
    }

    @ApiOperation(value = "Updates the IntLocking instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public IntLocking editIntLocking(@PathVariable("id") Integer id, @RequestBody IntLocking intLocking) {
        LOGGER.debug("Editing IntLocking with id: {}" , intLocking.getId());

        intLocking.setId(id);
        intLocking = intLockingService.update(intLocking);
        LOGGER.debug("IntLocking details with id: {}" , intLocking);

        return intLocking;
    }

    @ApiOperation(value = "Deletes the IntLocking instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteIntLocking(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting IntLocking with id: {}" , id);

        IntLocking deletedIntLocking = intLockingService.delete(id);

        return deletedIntLocking != null;
    }

    @RequestMapping(value = "/version/{version}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching IntLocking with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public IntLocking getByVersion(@PathVariable("version") Integer version) {
        LOGGER.debug("Getting IntLocking with uniques key Version");
        return intLockingService.getByVersion(version);
    }

    /**
     * @deprecated Use {@link #findIntLockings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of IntLocking instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<IntLocking> searchIntLockingsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering IntLockings list by query filter:{}", (Object) queryFilters);
        return intLockingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of IntLocking instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<IntLocking> findIntLockings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering IntLockings list by filter:", query);
        return intLockingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of IntLocking instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<IntLocking> filterIntLockings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering IntLockings list by filter", query);
        return intLockingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportIntLockings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return intLockingService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportIntLockingsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = IntLocking.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> intLockingService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of IntLocking instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countIntLockings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting IntLockings");
		return intLockingService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getIntLockingAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return intLockingService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service IntLockingService instance
	 */
	protected void setIntLockingService(IntLockingService service) {
		this.intLockingService = service;
	}

}