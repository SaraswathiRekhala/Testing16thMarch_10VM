/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.allscenariosdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.allscenariosdb.IntLocking;


/**
 * ServiceImpl object for domain model class IntLocking.
 *
 * @see IntLocking
 */
@Service("allscenariosdb.IntLockingService")
@Validated
public class IntLockingServiceImpl implements IntLockingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IntLockingServiceImpl.class);


    @Autowired
    @Qualifier("allscenariosdb.IntLockingDao")
    private WMGenericDao<IntLocking, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IntLocking, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public IntLocking create(IntLocking intLocking) {
        LOGGER.debug("Creating a new IntLocking with information: {}", intLocking);

        IntLocking intLockingCreated = this.wmGenericDao.create(intLocking);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(intLockingCreated);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public IntLocking getById(Integer intlockingId) {
        LOGGER.debug("Finding IntLocking by id: {}", intlockingId);
        return this.wmGenericDao.findById(intlockingId);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public IntLocking findById(Integer intlockingId) {
        LOGGER.debug("Finding IntLocking by id: {}", intlockingId);
        try {
            return this.wmGenericDao.findById(intlockingId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No IntLocking found with id: {}", intlockingId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public List<IntLocking> findByMultipleIds(List<Integer> intlockingIds, boolean orderedReturn) {
        LOGGER.debug("Finding IntLockings by ids: {}", intlockingIds);

        return this.wmGenericDao.findByMultipleIds(intlockingIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public IntLocking getByVersion(Integer version) {
        Map<String, Object> versionMap = new HashMap<>();
        versionMap.put("version", version);

        LOGGER.debug("Finding IntLocking by unique keys: {}", versionMap);
        return this.wmGenericDao.findByUniqueKey(versionMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "allscenariosdbTransactionManager")
    @Override
    public IntLocking update(IntLocking intLocking) {
        LOGGER.debug("Updating IntLocking with information: {}", intLocking);

        this.wmGenericDao.update(intLocking);
        this.wmGenericDao.refresh(intLocking);

        return intLocking;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public IntLocking delete(Integer intlockingId) {
        LOGGER.debug("Deleting IntLocking with id: {}", intlockingId);
        IntLocking deleted = this.wmGenericDao.findById(intlockingId);
        if (deleted == null) {
            LOGGER.debug("No IntLocking found with id: {}", intlockingId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), IntLocking.class.getSimpleName(), intlockingId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public void delete(IntLocking intLocking) {
        LOGGER.debug("Deleting IntLocking with {}", intLocking);
        this.wmGenericDao.delete(intLocking);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<IntLocking> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IntLockings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<IntLocking> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IntLockings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service allscenariosdb for table IntLocking to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service allscenariosdb for table IntLocking to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}