/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.allscenariosdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.allscenariosdb.Many2oneC;
import com.testing16thmarch_10vm.allscenariosdb.One2manyP;


/**
 * ServiceImpl object for domain model class One2manyP.
 *
 * @see One2manyP
 */
@Service("allscenariosdb.One2manyPService")
@Validated
public class One2manyPServiceImpl implements One2manyPService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2manyPServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("allscenariosdb.Many2oneCService")
    private Many2oneCService many2oneCService;

    @Autowired
    @Qualifier("allscenariosdb.One2manyPDao")
    private WMGenericDao<One2manyP, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2manyP, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public One2manyP create(One2manyP one2manyP) {
        LOGGER.debug("Creating a new One2manyP with information: {}", one2manyP);

        One2manyP one2manyPCreated = this.wmGenericDao.create(one2manyP);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2manyPCreated);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public One2manyP getById(Short one2manypId) {
        LOGGER.debug("Finding One2manyP by id: {}", one2manypId);
        return this.wmGenericDao.findById(one2manypId);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public One2manyP findById(Short one2manypId) {
        LOGGER.debug("Finding One2manyP by id: {}", one2manypId);
        try {
            return this.wmGenericDao.findById(one2manypId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2manyP found with id: {}", one2manypId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public List<One2manyP> findByMultipleIds(List<Short> one2manypIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2manyPs by ids: {}", one2manypIds);

        return this.wmGenericDao.findByMultipleIds(one2manypIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "allscenariosdbTransactionManager")
    @Override
    public One2manyP update(One2manyP one2manyP) {
        LOGGER.debug("Updating One2manyP with information: {}", one2manyP);

        this.wmGenericDao.update(one2manyP);
        this.wmGenericDao.refresh(one2manyP);

        return one2manyP;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public One2manyP delete(Short one2manypId) {
        LOGGER.debug("Deleting One2manyP with id: {}", one2manypId);
        One2manyP deleted = this.wmGenericDao.findById(one2manypId);
        if (deleted == null) {
            LOGGER.debug("No One2manyP found with id: {}", one2manypId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), One2manyP.class.getSimpleName(), one2manypId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public void delete(One2manyP one2manyP) {
        LOGGER.debug("Deleting One2manyP with {}", one2manyP);
        this.wmGenericDao.delete(one2manyP);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<One2manyP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2manyPs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<One2manyP> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2manyPs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service allscenariosdb for table One2manyP to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service allscenariosdb for table One2manyP to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<Many2oneC> findAssociatedMany2oneCs(Short shortId, Pageable pageable) {
        LOGGER.debug("Fetching all associated many2oneCs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("one2manyP.shortId = '" + shortId + "'");

        return many2oneCService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service Many2oneCService instance
     */
    protected void setMany2oneCService(Many2oneCService service) {
        this.many2oneCService = service;
    }

}