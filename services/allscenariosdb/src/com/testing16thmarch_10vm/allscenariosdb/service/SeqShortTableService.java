/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.allscenariosdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.allscenariosdb.SeqShortTable;

/**
 * Service object for domain model class {@link SeqShortTable}.
 */
public interface SeqShortTableService {

    /**
     * Creates a new SeqShortTable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SeqShortTable if any.
     *
     * @param seqShortTable Details of the SeqShortTable to be created; value cannot be null.
     * @return The newly created SeqShortTable.
     */
    SeqShortTable create(@Valid SeqShortTable seqShortTable);


	/**
     * Returns SeqShortTable by given id if exists.
     *
     * @param seqshorttableId The id of the SeqShortTable to get; value cannot be null.
     * @return SeqShortTable associated with the given seqshorttableId.
	 * @throws EntityNotFoundException If no SeqShortTable is found.
     */
    SeqShortTable getById(Short seqshorttableId);

    /**
     * Find and return the SeqShortTable by given id if exists, returns null otherwise.
     *
     * @param seqshorttableId The id of the SeqShortTable to get; value cannot be null.
     * @return SeqShortTable associated with the given seqshorttableId.
     */
    SeqShortTable findById(Short seqshorttableId);

	/**
     * Find and return the list of SeqShortTables by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param seqshorttableIds The id's of the SeqShortTable to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return SeqShortTables associated with the given seqshorttableIds.
     */
    List<SeqShortTable> findByMultipleIds(List<Short> seqshorttableIds, boolean orderedReturn);


    /**
     * Updates the details of an existing SeqShortTable. It replaces all fields of the existing SeqShortTable with the given seqShortTable.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SeqShortTable if any.
     *
     * @param seqShortTable The details of the SeqShortTable to be updated; value cannot be null.
     * @return The updated SeqShortTable.
     * @throws EntityNotFoundException if no SeqShortTable is found with given input.
     */
    SeqShortTable update(@Valid SeqShortTable seqShortTable);

    /**
     * Deletes an existing SeqShortTable with the given id.
     *
     * @param seqshorttableId The id of the SeqShortTable to be deleted; value cannot be null.
     * @return The deleted SeqShortTable.
     * @throws EntityNotFoundException if no SeqShortTable found with the given id.
     */
    SeqShortTable delete(Short seqshorttableId);

    /**
     * Deletes an existing SeqShortTable with the given object.
     *
     * @param seqShortTable The instance of the SeqShortTable to be deleted; value cannot be null.
     */
    void delete(SeqShortTable seqShortTable);

    /**
     * Find all SeqShortTables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SeqShortTables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<SeqShortTable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all SeqShortTables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SeqShortTables.
     *
     * @see Pageable
     * @see Page
     */
    Page<SeqShortTable> findAll(String query, Pageable pageable);

    /**
     * Exports all SeqShortTables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all SeqShortTables matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the SeqShortTables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the SeqShortTable.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}