/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.allscenariosdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.allscenariosdb.ViewBlobTable;


/**
 * ServiceImpl object for domain model class ViewBlobTable.
 *
 * @see ViewBlobTable
 */
@Service("allscenariosdb.ViewBlobTableService")
@Validated
public class ViewBlobTableServiceImpl implements ViewBlobTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewBlobTableServiceImpl.class);


    @Autowired
    @Qualifier("allscenariosdb.ViewBlobTableDao")
    private WMGenericDao<ViewBlobTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ViewBlobTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public ViewBlobTable create(ViewBlobTable viewBlobTable) {
        LOGGER.debug("Creating a new ViewBlobTable with information: {}", viewBlobTable);

        ViewBlobTable viewBlobTableCreated = this.wmGenericDao.create(viewBlobTable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(viewBlobTableCreated);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public ViewBlobTable getById(Integer viewblobtableId) {
        LOGGER.debug("Finding ViewBlobTable by id: {}", viewblobtableId);
        return this.wmGenericDao.findById(viewblobtableId);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public ViewBlobTable findById(Integer viewblobtableId) {
        LOGGER.debug("Finding ViewBlobTable by id: {}", viewblobtableId);
        try {
            return this.wmGenericDao.findById(viewblobtableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ViewBlobTable found with id: {}", viewblobtableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public List<ViewBlobTable> findByMultipleIds(List<Integer> viewblobtableIds, boolean orderedReturn) {
        LOGGER.debug("Finding ViewBlobTables by ids: {}", viewblobtableIds);

        return this.wmGenericDao.findByMultipleIds(viewblobtableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "allscenariosdbTransactionManager")
    @Override
    public ViewBlobTable update(ViewBlobTable viewBlobTable) {
        LOGGER.debug("Updating ViewBlobTable with information: {}", viewBlobTable);

        this.wmGenericDao.update(viewBlobTable);
        this.wmGenericDao.refresh(viewBlobTable);

        return viewBlobTable;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public ViewBlobTable delete(Integer viewblobtableId) {
        LOGGER.debug("Deleting ViewBlobTable with id: {}", viewblobtableId);
        ViewBlobTable deleted = this.wmGenericDao.findById(viewblobtableId);
        if (deleted == null) {
            LOGGER.debug("No ViewBlobTable found with id: {}", viewblobtableId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), ViewBlobTable.class.getSimpleName(), viewblobtableId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public void delete(ViewBlobTable viewBlobTable) {
        LOGGER.debug("Deleting ViewBlobTable with {}", viewBlobTable);
        this.wmGenericDao.delete(viewBlobTable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<ViewBlobTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ViewBlobTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<ViewBlobTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ViewBlobTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service allscenariosdb for table ViewBlobTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service allscenariosdb for table ViewBlobTable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}