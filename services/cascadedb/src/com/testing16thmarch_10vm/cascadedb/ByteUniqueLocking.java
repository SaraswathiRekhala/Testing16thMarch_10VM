/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.cascadedb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

/**
 * ByteUniqueLocking generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`BYTE_UNIQUE_LOCKING`", uniqueConstraints = {
            @UniqueConstraint(name = "`UK_TABLE5_VERSION`", columnNames = {"`VERSION`"})})
public class ByteUniqueLocking implements Serializable {

    private Integer id;
    private String column2;
    private Byte version;

    @Id
    @SequenceGenerator(name = "generator", sequenceName = "\"TABLE5_ID_seq\"" , allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "generator")
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`COLUMN2`", nullable = true, length = 255)
    public String getColumn2() {
        return this.column2;
    }

    public void setColumn2(String column2) {
        this.column2 = column2;
    }

    @Column(name = "`VERSION`", nullable = true, scale = 0, precision = 5)
	@Version
    public Byte getVersion() {
        return this.version;
    }

    public void setVersion(Byte version) {
        this.version = version;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ByteUniqueLocking)) return false;
        final ByteUniqueLocking byteUniqueLocking = (ByteUniqueLocking) o;
        return Objects.equals(getId(), byteUniqueLocking.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}