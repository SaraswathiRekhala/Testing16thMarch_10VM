/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.cascadedb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Version;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * ChildLocking generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`CHILD_LOCKING`")
public class ChildLocking implements Serializable {

    private Integer id;
    private String column2;
    private Integer version;
    private ParentLockinig parentLockinig;

    @Id
    @SequenceGenerator(name = "generator", sequenceName = "`TABLE3_ID_seq`" , allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "generator")
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`COLUMN2`", nullable = true, length = 255)
    public String getColumn2() {
        return this.column2;
    }

    public void setColumn2(String column2) {
        this.column2 = column2;
    }

    @Column(name = "`VERSION`", nullable = true, scale = 0, precision = 10)
	@Version
    public Integer getVersion() {
        return this.version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`VERSION`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_TABLE3_TO_TABLE4_VERSJCoZU`"))
    @Fetch(FetchMode.JOIN)
    public ParentLockinig getParentLockinig() {
        return this.parentLockinig;
    }

    public void setParentLockinig(ParentLockinig parentLockinig) {
        if(parentLockinig != null) {
            this.version = parentLockinig.getId();
        }

        this.parentLockinig = parentLockinig;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChildLocking)) return false;
        final ChildLocking childLocking = (ChildLocking) o;
        return Objects.equals(getId(), childLocking.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}