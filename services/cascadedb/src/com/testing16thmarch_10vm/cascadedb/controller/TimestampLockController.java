/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing16thmarch_10vm.cascadedb.TimestampLock;
import com.testing16thmarch_10vm.cascadedb.service.TimestampLockService;


/**
 * Controller object for domain model class TimestampLock.
 * @see TimestampLock
 */
@RestController("cascadedb.TimestampLockController")
@Api(value = "TimestampLockController", description = "Exposes APIs to work with TimestampLock resource.")
@RequestMapping("/cascadedb/TimestampLock")
public class TimestampLockController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimestampLockController.class);

    @Autowired
	@Qualifier("cascadedb.TimestampLockService")
	private TimestampLockService timestampLockService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TimestampLock instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TimestampLock createTimestampLock(@RequestPart("wm_data_json") TimestampLock timestampLock, @RequestPart(value = "blobcol", required = false) MultipartFile _blobcol) {
		LOGGER.debug("Create TimestampLock with information: {}" , timestampLock);

    timestampLock.setBlobcol(WMMultipartUtils.toByteArray(_blobcol));
		timestampLock = timestampLockService.create(timestampLock);
		LOGGER.debug("Created TimestampLock with information: {}" , timestampLock);

	    return timestampLock;
	}

    @ApiOperation(value = "Returns the TimestampLock instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TimestampLock getTimestampLock(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TimestampLock with id: {}" , id);

        TimestampLock foundTimestampLock = timestampLockService.getById(id);
        LOGGER.debug("TimestampLock details with id: {}" , foundTimestampLock);

        return foundTimestampLock;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in TimestampLock instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getTimestampLockBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in TimestampLock instance" , fieldName);

        if(!WMRuntimeUtils.isLob(TimestampLock.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        TimestampLock timestampLock = timestampLockService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(timestampLock, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the TimestampLock instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TimestampLock editTimestampLock(@PathVariable("id") Integer id, @RequestBody TimestampLock timestampLock) {
        LOGGER.debug("Editing TimestampLock with id: {}" , timestampLock.getId());

        timestampLock.setId(id);
        timestampLock = timestampLockService.update(timestampLock);
        LOGGER.debug("TimestampLock details with id: {}" , timestampLock);

        return timestampLock;
    }

    @ApiOperation(value = "Updates the TimestampLock instance associated with the given id.This API should be used when TimestampLock instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TimestampLock editTimestampLock(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        TimestampLock newTimestampLock = WMMultipartUtils.toObject(multipartHttpServletRequest, TimestampLock.class, "cascadedb");
        newTimestampLock.setId(id);

        TimestampLock oldTimestampLock = timestampLockService.getById(id);
        WMMultipartUtils.updateLobsContent(oldTimestampLock, newTimestampLock);
        LOGGER.debug("Updating TimestampLock with information: {}" , newTimestampLock);

        return timestampLockService.update(newTimestampLock);
    }

    @ApiOperation(value = "Deletes the TimestampLock instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTimestampLock(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TimestampLock with id: {}" , id);

        TimestampLock deletedTimestampLock = timestampLockService.delete(id);

        return deletedTimestampLock != null;
    }

    /**
     * @deprecated Use {@link #findTimestampLocks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TimestampLock instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<TimestampLock> searchTimestampLocksByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TimestampLocks list by query filter:{}", (Object) queryFilters);
        return timestampLockService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TimestampLock instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TimestampLock> findTimestampLocks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TimestampLocks list by filter:", query);
        return timestampLockService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TimestampLock instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<TimestampLock> filterTimestampLocks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TimestampLocks list by filter", query);
        return timestampLockService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportTimestampLocks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return timestampLockService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportTimestampLocksAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TimestampLock.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> timestampLockService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TimestampLock instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countTimestampLocks( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TimestampLocks");
		return timestampLockService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getTimestampLockAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return timestampLockService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TimestampLockService instance
	 */
	protected void setTimestampLockService(TimestampLockService service) {
		this.timestampLockService = service;
	}

}