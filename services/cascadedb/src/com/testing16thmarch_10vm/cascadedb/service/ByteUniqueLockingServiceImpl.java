/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.cascadedb.ByteUniqueLocking;


/**
 * ServiceImpl object for domain model class ByteUniqueLocking.
 *
 * @see ByteUniqueLocking
 */
@Service("cascadedb.ByteUniqueLockingService")
@Validated
public class ByteUniqueLockingServiceImpl implements ByteUniqueLockingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ByteUniqueLockingServiceImpl.class);


    @Autowired
    @Qualifier("cascadedb.ByteUniqueLockingDao")
    private WMGenericDao<ByteUniqueLocking, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ByteUniqueLocking, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public ByteUniqueLocking create(ByteUniqueLocking byteUniqueLocking) {
        LOGGER.debug("Creating a new ByteUniqueLocking with information: {}", byteUniqueLocking);

        ByteUniqueLocking byteUniqueLockingCreated = this.wmGenericDao.create(byteUniqueLocking);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(byteUniqueLockingCreated);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public ByteUniqueLocking getById(Integer byteuniquelockingId) {
        LOGGER.debug("Finding ByteUniqueLocking by id: {}", byteuniquelockingId);
        return this.wmGenericDao.findById(byteuniquelockingId);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public ByteUniqueLocking findById(Integer byteuniquelockingId) {
        LOGGER.debug("Finding ByteUniqueLocking by id: {}", byteuniquelockingId);
        try {
            return this.wmGenericDao.findById(byteuniquelockingId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ByteUniqueLocking found with id: {}", byteuniquelockingId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public List<ByteUniqueLocking> findByMultipleIds(List<Integer> byteuniquelockingIds, boolean orderedReturn) {
        LOGGER.debug("Finding ByteUniqueLockings by ids: {}", byteuniquelockingIds);

        return this.wmGenericDao.findByMultipleIds(byteuniquelockingIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public ByteUniqueLocking getByVersion(Byte version) {
        Map<String, Object> versionMap = new HashMap<>();
        versionMap.put("version", version);

        LOGGER.debug("Finding ByteUniqueLocking by unique keys: {}", versionMap);
        return this.wmGenericDao.findByUniqueKey(versionMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "cascadedbTransactionManager")
    @Override
    public ByteUniqueLocking update(ByteUniqueLocking byteUniqueLocking) {
        LOGGER.debug("Updating ByteUniqueLocking with information: {}", byteUniqueLocking);

        this.wmGenericDao.update(byteUniqueLocking);
        this.wmGenericDao.refresh(byteUniqueLocking);

        return byteUniqueLocking;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public ByteUniqueLocking delete(Integer byteuniquelockingId) {
        LOGGER.debug("Deleting ByteUniqueLocking with id: {}", byteuniquelockingId);
        ByteUniqueLocking deleted = this.wmGenericDao.findById(byteuniquelockingId);
        if (deleted == null) {
            LOGGER.debug("No ByteUniqueLocking found with id: {}", byteuniquelockingId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), ByteUniqueLocking.class.getSimpleName(), byteuniquelockingId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public void delete(ByteUniqueLocking byteUniqueLocking) {
        LOGGER.debug("Deleting ByteUniqueLocking with {}", byteUniqueLocking);
        this.wmGenericDao.delete(byteUniqueLocking);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<ByteUniqueLocking> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ByteUniqueLockings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<ByteUniqueLocking> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ByteUniqueLockings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cascadedb for table ByteUniqueLocking to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service cascadedb for table ByteUniqueLocking to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}