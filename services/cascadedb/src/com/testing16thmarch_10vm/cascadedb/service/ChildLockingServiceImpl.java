/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.cascadedb.ChildLocking;


/**
 * ServiceImpl object for domain model class ChildLocking.
 *
 * @see ChildLocking
 */
@Service("cascadedb.ChildLockingService")
@Validated
public class ChildLockingServiceImpl implements ChildLockingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChildLockingServiceImpl.class);


    @Autowired
    @Qualifier("cascadedb.ChildLockingDao")
    private WMGenericDao<ChildLocking, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ChildLocking, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public ChildLocking create(ChildLocking childLocking) {
        LOGGER.debug("Creating a new ChildLocking with information: {}", childLocking);

        ChildLocking childLockingCreated = this.wmGenericDao.create(childLocking);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(childLockingCreated);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public ChildLocking getById(Integer childlockingId) {
        LOGGER.debug("Finding ChildLocking by id: {}", childlockingId);
        return this.wmGenericDao.findById(childlockingId);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public ChildLocking findById(Integer childlockingId) {
        LOGGER.debug("Finding ChildLocking by id: {}", childlockingId);
        try {
            return this.wmGenericDao.findById(childlockingId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ChildLocking found with id: {}", childlockingId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public List<ChildLocking> findByMultipleIds(List<Integer> childlockingIds, boolean orderedReturn) {
        LOGGER.debug("Finding ChildLockings by ids: {}", childlockingIds);

        return this.wmGenericDao.findByMultipleIds(childlockingIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "cascadedbTransactionManager")
    @Override
    public ChildLocking update(ChildLocking childLocking) {
        LOGGER.debug("Updating ChildLocking with information: {}", childLocking);

        this.wmGenericDao.update(childLocking);
        this.wmGenericDao.refresh(childLocking);

        return childLocking;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public ChildLocking delete(Integer childlockingId) {
        LOGGER.debug("Deleting ChildLocking with id: {}", childlockingId);
        ChildLocking deleted = this.wmGenericDao.findById(childlockingId);
        if (deleted == null) {
            LOGGER.debug("No ChildLocking found with id: {}", childlockingId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), ChildLocking.class.getSimpleName(), childlockingId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public void delete(ChildLocking childLocking) {
        LOGGER.debug("Deleting ChildLocking with {}", childLocking);
        this.wmGenericDao.delete(childLocking);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<ChildLocking> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ChildLockings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<ChildLocking> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ChildLockings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cascadedb for table ChildLocking to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service cascadedb for table ChildLocking to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}