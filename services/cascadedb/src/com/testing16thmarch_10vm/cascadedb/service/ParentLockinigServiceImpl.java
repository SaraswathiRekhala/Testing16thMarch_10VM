/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.cascadedb.ChildLocking;
import com.testing16thmarch_10vm.cascadedb.ParentLockinig;


/**
 * ServiceImpl object for domain model class ParentLockinig.
 *
 * @see ParentLockinig
 */
@Service("cascadedb.ParentLockinigService")
@Validated
public class ParentLockinigServiceImpl implements ParentLockinigService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ParentLockinigServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("cascadedb.ChildLockingService")
    private ChildLockingService childLockingService;

    @Autowired
    @Qualifier("cascadedb.ParentLockinigDao")
    private WMGenericDao<ParentLockinig, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ParentLockinig, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public ParentLockinig create(ParentLockinig parentLockinig) {
        LOGGER.debug("Creating a new ParentLockinig with information: {}", parentLockinig);

        ParentLockinig parentLockinigCreated = this.wmGenericDao.create(parentLockinig);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(parentLockinigCreated);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public ParentLockinig getById(Integer parentlockinigId) {
        LOGGER.debug("Finding ParentLockinig by id: {}", parentlockinigId);
        return this.wmGenericDao.findById(parentlockinigId);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public ParentLockinig findById(Integer parentlockinigId) {
        LOGGER.debug("Finding ParentLockinig by id: {}", parentlockinigId);
        try {
            return this.wmGenericDao.findById(parentlockinigId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ParentLockinig found with id: {}", parentlockinigId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public List<ParentLockinig> findByMultipleIds(List<Integer> parentlockinigIds, boolean orderedReturn) {
        LOGGER.debug("Finding ParentLockinigs by ids: {}", parentlockinigIds);

        return this.wmGenericDao.findByMultipleIds(parentlockinigIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "cascadedbTransactionManager")
    @Override
    public ParentLockinig update(ParentLockinig parentLockinig) {
        LOGGER.debug("Updating ParentLockinig with information: {}", parentLockinig);

        this.wmGenericDao.update(parentLockinig);
        this.wmGenericDao.refresh(parentLockinig);

        return parentLockinig;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public ParentLockinig delete(Integer parentlockinigId) {
        LOGGER.debug("Deleting ParentLockinig with id: {}", parentlockinigId);
        ParentLockinig deleted = this.wmGenericDao.findById(parentlockinigId);
        if (deleted == null) {
            LOGGER.debug("No ParentLockinig found with id: {}", parentlockinigId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), ParentLockinig.class.getSimpleName(), parentlockinigId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public void delete(ParentLockinig parentLockinig) {
        LOGGER.debug("Deleting ParentLockinig with {}", parentLockinig);
        this.wmGenericDao.delete(parentLockinig);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<ParentLockinig> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ParentLockinigs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<ParentLockinig> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ParentLockinigs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cascadedb for table ParentLockinig to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service cascadedb for table ParentLockinig to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<ChildLocking> findAssociatedChildLockings(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated childLockings");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("parentLockinig.id = '" + id + "'");

        return childLockingService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ChildLockingService instance
     */
    protected void setChildLockingService(ChildLockingService service) {
        this.childLockingService = service;
    }

}