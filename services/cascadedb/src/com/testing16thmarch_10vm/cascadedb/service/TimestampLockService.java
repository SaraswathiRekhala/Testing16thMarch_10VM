/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.cascadedb.TimestampLock;

/**
 * Service object for domain model class {@link TimestampLock}.
 */
public interface TimestampLockService {

    /**
     * Creates a new TimestampLock. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TimestampLock if any.
     *
     * @param timestampLock Details of the TimestampLock to be created; value cannot be null.
     * @return The newly created TimestampLock.
     */
    TimestampLock create(@Valid TimestampLock timestampLock);


	/**
     * Returns TimestampLock by given id if exists.
     *
     * @param timestamplockId The id of the TimestampLock to get; value cannot be null.
     * @return TimestampLock associated with the given timestamplockId.
	 * @throws EntityNotFoundException If no TimestampLock is found.
     */
    TimestampLock getById(Integer timestamplockId);

    /**
     * Find and return the TimestampLock by given id if exists, returns null otherwise.
     *
     * @param timestamplockId The id of the TimestampLock to get; value cannot be null.
     * @return TimestampLock associated with the given timestamplockId.
     */
    TimestampLock findById(Integer timestamplockId);

	/**
     * Find and return the list of TimestampLocks by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param timestamplockIds The id's of the TimestampLock to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TimestampLocks associated with the given timestamplockIds.
     */
    List<TimestampLock> findByMultipleIds(List<Integer> timestamplockIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TimestampLock. It replaces all fields of the existing TimestampLock with the given timestampLock.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TimestampLock if any.
     *
     * @param timestampLock The details of the TimestampLock to be updated; value cannot be null.
     * @return The updated TimestampLock.
     * @throws EntityNotFoundException if no TimestampLock is found with given input.
     */
    TimestampLock update(@Valid TimestampLock timestampLock);

    /**
     * Deletes an existing TimestampLock with the given id.
     *
     * @param timestamplockId The id of the TimestampLock to be deleted; value cannot be null.
     * @return The deleted TimestampLock.
     * @throws EntityNotFoundException if no TimestampLock found with the given id.
     */
    TimestampLock delete(Integer timestamplockId);

    /**
     * Deletes an existing TimestampLock with the given object.
     *
     * @param timestampLock The instance of the TimestampLock to be deleted; value cannot be null.
     */
    void delete(TimestampLock timestampLock);

    /**
     * Find all TimestampLocks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TimestampLocks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TimestampLock> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TimestampLocks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TimestampLocks.
     *
     * @see Pageable
     * @see Page
     */
    Page<TimestampLock> findAll(String query, Pageable pageable);

    /**
     * Exports all TimestampLocks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TimestampLocks matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TimestampLocks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TimestampLock.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}