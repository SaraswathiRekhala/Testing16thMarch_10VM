/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thmarch_10vm.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thmarch_10vm.cascadedb.TimestampLock;


/**
 * ServiceImpl object for domain model class TimestampLock.
 *
 * @see TimestampLock
 */
@Service("cascadedb.TimestampLockService")
@Validated
public class TimestampLockServiceImpl implements TimestampLockService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimestampLockServiceImpl.class);


    @Autowired
    @Qualifier("cascadedb.TimestampLockDao")
    private WMGenericDao<TimestampLock, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TimestampLock, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public TimestampLock create(TimestampLock timestampLock) {
        LOGGER.debug("Creating a new TimestampLock with information: {}", timestampLock);

        TimestampLock timestampLockCreated = this.wmGenericDao.create(timestampLock);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(timestampLockCreated);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public TimestampLock getById(Integer timestamplockId) {
        LOGGER.debug("Finding TimestampLock by id: {}", timestamplockId);
        return this.wmGenericDao.findById(timestamplockId);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public TimestampLock findById(Integer timestamplockId) {
        LOGGER.debug("Finding TimestampLock by id: {}", timestamplockId);
        try {
            return this.wmGenericDao.findById(timestamplockId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TimestampLock found with id: {}", timestamplockId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public List<TimestampLock> findByMultipleIds(List<Integer> timestamplockIds, boolean orderedReturn) {
        LOGGER.debug("Finding TimestampLocks by ids: {}", timestamplockIds);

        return this.wmGenericDao.findByMultipleIds(timestamplockIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "cascadedbTransactionManager")
    @Override
    public TimestampLock update(TimestampLock timestampLock) {
        LOGGER.debug("Updating TimestampLock with information: {}", timestampLock);

        this.wmGenericDao.update(timestampLock);
        this.wmGenericDao.refresh(timestampLock);

        return timestampLock;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public TimestampLock delete(Integer timestamplockId) {
        LOGGER.debug("Deleting TimestampLock with id: {}", timestamplockId);
        TimestampLock deleted = this.wmGenericDao.findById(timestamplockId);
        if (deleted == null) {
            LOGGER.debug("No TimestampLock found with id: {}", timestamplockId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TimestampLock.class.getSimpleName(), timestamplockId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "cascadedbTransactionManager")
    @Override
    public void delete(TimestampLock timestampLock) {
        LOGGER.debug("Deleting TimestampLock with {}", timestampLock);
        this.wmGenericDao.delete(timestampLock);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<TimestampLock> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TimestampLocks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<TimestampLock> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TimestampLocks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cascadedb for table TimestampLock to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service cascadedb for table TimestampLock to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cascadedbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}